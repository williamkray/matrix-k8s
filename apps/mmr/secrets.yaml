---
apiVersion: v1
kind: Secret
metadata:
  name: mmr-db-secrets
type: Opaque
stringData:
  postgres-password: somesupersecretpassword
---
apiVersion: v1
kind: Secret
metadata:
  name: mmr-config-secrets
type: Opaque
stringData:
  02-database.yaml: |
    database:
      # Currently only "postgres" is supported.
      postgres: "postgres://mediarepo:somesupersecretpassword@mmrpsql/mediarepo?sslmode=disable"

      # The database pooling options
      pool:
        # The maximum number of connects to hold open. More of these allow for more concurrent
        # processes to happen.
        maxConnections: 25

        # The maximum number of connects to leave idle. More of these reduces the time it takes
        # to serve requests in low-traffic scenarios.
        maxIdleConnections: 5

  07-s3datastores.yaml: |
    # Datastores are places where media should be persisted. This isn't dedicated for just uploads:
    # thumbnails and other misc data is also stored in these places. The media repo, when looking
    # for a datastore to use, will always use the smallest datastore first.
    datastores:
      - type: file
        enabled: true # Enable this to set up data storage.
        # Datastores can be split into many areas when handling uploads. Media is still de-duplicated
        # across all datastores (local content which duplicates remote content will re-use the remote
        # content's location). This option is useful if your datastore is becoming very large, or if
        # you want faster storage for a particular kind of media.
        #
        # The kinds available are:
        #   thumbnails    - Used to store thumbnails of media (local and remote).
        #   remote_media  - Original copies of remote media (servers not configured by this repo).
        #   local_media   - Original uploads for local media.
        #   archives      - Archives of content (GDPR and similar requests).
        forKinds: ["thumbnails", "remote_media", "local_media", "archives"]
        opts:
          path: /data/media

      - type: s3
        enabled: false # Enable this to set up s3 uploads
        forKinds: ["thumbnails", "remote_media", "local_media", "archives"]
        opts:
          # The s3 uploader needs a temporary location to buffer files to reduce memory usage on
          # small file uploads. If the file size is unknown, the file is written to this location
          # before being uploaded to s3 (then the file is deleted). If you aren't concerned about
          # memory usage, set this to an empty string.
          tempPath: "/tmp/mediarepo_s3_upload"
          endpoint: sfo2.digitaloceanspaces.com
          accessKeyId: ""
          accessSecret: ""
          ssl: true
          bucketName: "your-media-bucket"
          # An optional region for where this S3 endpoint is located. Typically not needed, though
          # some providers will need this (like Scaleway). Uncomment to use.
          #region: "sfo2"

      # The media repo does support an IPFS datastore, but only if the IPFS feature is enabled. If
      # the feature is not enabled, this will not work. Note that IPFS support is experimental at
      # the moment and not recommended for general use.
      #
      # NOTE: Everything you upload to IPFS will be publicly accessible, even when the media repo
      # puts authentication on the download endpoints. Only use this option for cases where you
      # expect your media to be publicly accessible.
      - type: ipfs
        enabled: false # Enable this to use IPFS support
        forKinds: ["local_media"]
        # The IPFS datastore currently has no options. It will use the daemon or HTTP API configured
        # in the IPFS section of your main config.
        opts: {}
